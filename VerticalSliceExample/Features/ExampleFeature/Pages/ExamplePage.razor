@page "/ExamplePage"
@inject IMediator _mediator
@using VerticalSliceExample.Features.ExampleFeature.Commands
@using VerticalSliceExample.Features.ExampleFeature.Queries

<h1>ExamplePage</h1>

<h2>Query Example</h2>

<p>Enter 1 - 3</p>

<input type="number" @bind-value="Id" />

<button type="button" class="btn btn-primary" @onclick="QueryExample">Query Example</button>

<h5>@QueryResponse</h5>

<hr>

<h2>Command Example</h2>

<p>Enter "Test"</p>

<input type="text" @bind-value="Text" />

<button type="button" class="btn btn-primary" @onclick="CommandExample">Command Example</button>

<h5>@CommandResponse</h5>

@code {
    public string QueryResponse { get; set; } = string.Empty;
    public string CommandResponse { get; set; } = string.Empty;
    public string Text { get; set; } = string.Empty;
    public int Id { get; set; } = 0;

    public async Task QueryExample()
    {
        var queryResult = await _mediator.Send(new ExampleQuery.Query(new ExampleRequest { Id = this.Id }));

        QueryResponse = queryResult.Result.Success switch
        {
            true => queryResult?.Result?.Value?.Example ?? string.Empty,
            false => queryResult?.Result?.Message ?? string.Empty
        };
    }

    public async Task CommandExample()
    {
        var queryResult = await _mediator.Send(new ExampleCommand.Command(new ExampleRequest() { Text = this.Text }));

        CommandResponse = queryResult.Result.Success switch
        {
            true => queryResult?.Result?.Value.ToString() ?? string.Empty,
            false => queryResult?.Result?.Value.ToString() + " " + queryResult?.Result?.Message ?? string.Empty
        };
    }
}
